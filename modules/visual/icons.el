;; -*- lexical-binding: t -*-

;; Configure nerd icons to look good
(after! nerd-icons
  (setq nerd-icons-font-family "Cozette"
        nerd-icons-font-names '("cozette.bdf")))

;; emojis
;; (after! emojify
;;   ;; default:
;;   ;; (dired-mode doc-view-mode debugger-mode pdf-view-mode image-mode help-mode ibuffer-mode magit-popup-mode magit-diff-mode ert-results-mode compilation-mode proced-mode mu4e-headers-mode deft-mode)
;;   (setq emojify-inhibit-major-modes '(vterm-mode)))

(setq doom-symbol-fallback-font-families '()
      doom-emoji-fallback-font-families '())

;; use Cozette-compatible nerd icons ==============================================================

;; modeline ---------------------------------------------------------------------------------------

(setq doom-modeline-modal-icon nil
      doom-modeline-modal-modern-icon nil)

(add-hook! 'mu4e-modeline-mode-hook
  (setq mu4e-modeline-all-clear '("C:" . "ÔÄÖ ")
        mu4e-modeline-all-read '("R:" . "ÔÄú ")
        mu4e-modeline-unread-items '("U:" . "Û∞á∞ ")
        mu4e-modeline-new-items '("N:" . "ÔÉ≥ ")
        ;; headers
        mu4e-headers-unread-mark    '("u" . "Û∞á∞ ")
        mu4e-headers-draft-mark     '("D" . "ÔÅÄ ")
        mu4e-headers-flagged-mark   '("F" . "ÔÄ´ ")
        mu4e-headers-new-mark       '("N" . "ÔÉ≥ ")
        mu4e-headers-passed-mark    '("P" . "ÔÅ§ ")
        mu4e-headers-replied-mark   '("R" . "Û∞ôÖ ")
        mu4e-headers-seen-mark      '("S" . "ÔÄú ")
        mu4e-headers-trashed-mark   '("T" . "ÔÄî ")
        mu4e-headers-attach-mark    '("a" . "ÔÉÖ ")
        mu4e-headers-encrypted-mark '("x" . "ÔÇÑ ")
        mu4e-headers-signed-mark    '("s" . "ÓüÑ ")
        mu4e-headers-calendar-mark  '("c" . "ÔÅ≥ ")
        mu4e-headers-list-mark      '("l" . "ÔÇû ")
        mu4e-headers-personal-mark  '("p" . "ÔÄ≠ ")
        ;; other?
        mu4e-search-hide-label      '("H " . "ÓÄá ")
        mu4e-search-skip-duplicates-label '("S " . "ÔÉÖ ")
        mu4e-search-threaded-label '("T " . "Û∞ôÖ ")
        mu4e-search-full-label '("F " . "ÔÄã ")
        mu4e-search-related-label '("R " . "ÔÇÖ ")))

(advice-add 'doom-modeline-lsp-icon :override
            (lambda (text face)
              "Display LSP icon (or TEXT in terminal) with FACE."
              (if doom-modeline-lsp-icon
                  (doom-modeline-icon 'faicon "nf-fa-cogs" "üöÄ" text :face face)
                (propertize text 'face face))))

(advice-add 'doom-modeline-buffer-file-state-icon :override
            (lambda (icon unicode text face)
              (doom-modeline-icon 'faicon
                                  (cond
                                   ;; status (simple format)
                                   ((string= icon "nf-md-reload_alert") "nf-fa-clock")
                                   ((string= icon "nf-md-lock") "nf-fa-lock")
                                   ((string= icon "nf-md-content_save_edit") "nf-fa-pencil")
                                   ((string= icon "nf-md-cancel") "nf-fa-circle_question")
                                   ((string= icon "nf-md-unfold_less_horizontal") "nf-fa-snowflake"))
                                  unicode text :face face)))

(advice-add 'doom-modeline-check-icon :override
            (lambda (icon unicode text face)
              (doom-modeline-icon 'faicon
                                  (and doom-modeline-check-icon
                                       (cond
                                        ;; status (simple format)
                                        ((string= icon "nf-md-alert_circle_outline") "nf-fa-remove_sign") ;; finished, errors
                                        ((string= icon "nf-md-check_circle_outline") "nf-fa-ok_sign") ;; finished, no errors
                                        ((string= icon "nf-md-timer_sand") "nf-fa-hourglass_1") ;; running
                                        ((string= icon "nf-md-alert_box_outline") "nf-fa-circle_exclamation") ;; no checker || errored
                                        ((string= icon "nf-md-pause_circle_outline") "nf-fa-pause") ;; interrupted
                                        ((string= icon "nf-md-file_question_outline") "nf-fa-circle_question") ;; suspicious
                                        ;; regular format
                                        ((string= icon "nf-md-close_circle_outline") "nf-fa-remove_sign") ;; error
                                        ((string= icon "nf-md-alert_outline") "nf-fa-warning") ;; warning
                                        ((string= icon "nf-md-information_outline") "nf-fa-circle_info") ;; info
                                        ))
                                  unicode text :face face)))

;; corfu ------------------------------------------------------------------------------------------

(setq nerd-icons-corfu-mapping
      ' ((array :style "md" :icon "code_parentheses" :face font-lock-type-face)
         (boolean :style "fa" :icon "cog" :face font-lock-builtin-face)
         (class :style "dev" :icon "netbeans" :face font-lock-type-face) ;; cube
         (color :style "fa" :icon "dashboard" :face success)
         (command :style "fa" :icon "terminal" :face default)
         (constant :style "fae" :icon "pi" :face font-lock-constant-face)
         (constructor :style "oct" :icon "triangle_right" :face font-lock-function-name-face)
         (enummember :style "fa" :icon "tag" :face font-lock-builtin-face)
         (enum-member :style "fa" :icon "tag" :face font-lock-builtin-face)
         (enum :style "fa" :icon "table_list" :face font-lock-builtin-face)
         (event :style "fa" :icon "bolt" :face font-lock-warning-face)
         (field :style "fa" :icon "tag" :face font-lock-variable-name-face)
         (file :style "fa" :icon "file" :face font-lock-string-face)
         (folder :style "fa" :icon "folder" :face font-lock-doc-face)
         (interface :style "md" :icon "server_network" :face font-lock-type-face)
         (keyword :style "fa" :icon "key" :face font-lock-keyword-face)
         (macro :style "fa" :icon "hashtag" :face font-lock-keyword-face)
         (magic :style "cod" :icon "wand" :face font-lock-builtin-face) ;; TODO
         (method :style "dev" :icon "clojure" :face font-lock-function-name-face)
         (function :style "dev" :icon "clojure" :face font-lock-function-name-face)
         (module :style "fa" :icon "archive" :face font-lock-preprocessor-face)
         (numeric :style "fae" :icon "pi" :face font-lock-builtin-face)
         (operator :style "fa" :icon "plus" :face font-lock-comment-delimiter-face)
         (param :style "fa" :icon "table_list" :face default)
         (property :style "fa" :icon "table_list" :face font-lock-variable-name-face)
         (reference :style "oct" :icon "file_symlink_directory" :face font-lock-variable-name-face)
         (snippet :style "fa" :icon "scissors" :face font-lock-string-face)
         (string :style "fa" :icon "font" :face font-lock-string-face)
         (struct :style "fa" :icon "database" :face font-lock-variable-name-face)
         (text :style "fa" :icon "font" :face font-lock-doc-face)
         (typeparameter :style "fa" :icon "table_list" :face font-lock-type-face)
         (type-parameter :style "fa" :icon "table_list" :face font-lock-type-face)
         (unit :style "fa" :icon "bar_chart" :face font-lock-constant-face)
         (value :style "fae" :icon "pi" :face font-lock-builtin-face)
         (variable :style "fa" :icon "cog" :face font-lock-variable-name-face)
         (t :style "fa" :icon "code" :face font-lock-warning-face)))

;; icons for different filetypes
(setq nerd-icons-extension-icon-alist
      '(("fish" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-lpink)
        ("zsh" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-lcyan)
        ("sh" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-purple)
        ("bat" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-lsilver)
        ("cmd" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-lsilver)
        ("tags" nerd-icons-faicon "nf-fa-tag" :face nerd-icons-blue)
        ("log" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-maroon)
        ("node" nerd-icons-devicon "nf-dev-npm" :face nerd-icons-green)
        ("bashrc" nerd-icons-devicon "nf-dev-terminal" :face nerd-icons-dpink)
        ("git" nerd-icons-devicon "nf-dev-git" :face nerd-icons-lred)
        ("gitattributes" nerd-icons-devicon "nf-dev-git" :face nerd-icons-lred)
        ("gitignore" nerd-icons-devicon "nf-dev-git" :face nerd-icons-lred)
        ("gitmodules" nerd-icons-devicon "nf-dev-git" :face nerd-icons-lred)
        ("dockerignore" nerd-icons-devicon "nf-dev-docker" :face nerd-icons-dblue)
        ("ini" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-dsilver)
        ("xml" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-lorange)
        ("json" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-yellow)
        ("jsonl" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-yellow)
        ("cson" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-yellow)
        ("yml" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-dyellow)
        ("yaml" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-dyellow)
        ("toml" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-orange)
        ("conf" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-dorange)
        ("pkg" nerd-icons-faicon "nf-fa-dropbox" :face nerd-icons-dsilver)
        ("rpm" nerd-icons-faicon "nf-fa-dropbox" :face nerd-icons-dsilver)
        ("pkgbuild" nerd-icons-faicon "nf-fa-dropbox" :face nerd-icons-dsilver)
        ("elc" nerd-icons-octicon "nf-oct-file_binary" :face nerd-icons-dsilver)
        ("eln" nerd-icons-octicon "nf-oct-file_binary" :face nerd-icons-dsilver)
        ("gz" nerd-icons-octicon "nf-oct-file_binary" :face nerd-icons-lmaroon)
        ("zip" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-lmaroon)
        ("7z" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-lmaroon)
        ("zst" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-lmaroon)
        ("dat" nerd-icons-faicon "nf-fa-bar_chart" :face nerd-icons-cyan)
        ("dmg" nerd-icons-faicon "nf-fa-cogs" :face nerd-icons-lsilver)
        ("dll" nerd-icons-faicon "nf-fa-cogs" :face nerd-icons-silver)
        ("ds_store" nerd-icons-faicon "nf-fa-cogs" :face nerd-icons-silver)
        ("exe" nerd-icons-octicon "nf-oct-file_binary" :face nerd-icons-dsilver)
        ("msg" nerd-icons-mdicon "nf-md-email_outline" :face nerd-icons-dsilver)
        ("elm" nerd-icons-sucicon "nf-seti-elm" :face nerd-icons-blue)
        ("erl" nerd-icons-devicon "nf-dev-erlang" :face nerd-icons-red)
        ("hrl" nerd-icons-devicon "nf-dev-erlang" :face nerd-icons-dred)
        ("eex" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lorange)
        ("leex" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lorange)
        ("heex" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lorange)
        ("ex" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lpurple)
        ("exs" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lred)
        ("livemd" nerd-icons-sucicon "nf-seti-elixir" :face nerd-icons-lblue)
        ("java" nerd-icons-devicon "nf-dev-java" :face nerd-icons-purple)
        ("gradle" nerd-icons-devicon "nf-dev-java" :face nerd-icons-silver)
        ("go" nerd-icons-sucicon "nf-seti-go" :face nerd-icons-blue)
        ("jl" nerd-icons-sucicon "nf-seti-julia" :face nerd-icons-purple)
        ("nix" nerd-icons-faicon "nf-fa-snowflake" :face nerd-icons-blue)
        ("pl" nerd-icons-devicon "nf-dev-perl" :face nerd-icons-lorange)
        ("pm" nerd-icons-devicon "nf-dev-perl" :face nerd-icons-lorange)
        ("pod" nerd-icons-devicon "nf-dev-perl" :face nerd-icons-lgreen)
        ("php" nerd-icons-devicon "nf-dev-php" :face nerd-icons-lsilver)
        ("ps1" nerd-icons-mdicon "nf-md-powershell" :face nerd-icons-blue)
        ("py" nerd-icons-devicon "nf-dev-python" :face nerd-icons-dblue)
        ("gem" nerd-icons-devicon "nf-dev-ruby" :face nerd-icons-red)
        ("rb" nerd-icons-devicon "nf-dev-ruby" :face nerd-icons-lred)
        ("rs" nerd-icons-devicon "nf-dev-rust" :face nerd-icons-maroon)
        ("rlib" nerd-icons-devicon "nf-dev-rust" :face nerd-icons-dmaroon)
        ("r" nerd-icons-mdicon "nf-md-language_r" :face nerd-icons-lblue)
        ("rd" nerd-icons-mdicon "nf-md-language_r" :face nerd-icons-lblue)
        ("rdx" nerd-icons-mdicon "nf-md-language_r" :face nerd-icons-lblue)
        ("rsx" nerd-icons-mdicon "nf-md-language_r" :face nerd-icons-lblue)
        ("svelte" nerd-icons-sucicon "nf-seti-svelte" :face nerd-icons-red)
        ("c" nerd-icons-sucicon "nf-custom-c" :face nerd-icons-blue)
        ("h" nerd-icons-faicon "nf-fa-h_square" :face nerd-icons-purple)
        ("cc" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-blue)
        ("cpp" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-blue)
        ("cxx" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-blue)
        ("hh" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-purple)
        ("hpp" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-purple)
        ("hxx" nerd-icons-sucicon "nf-custom-cpp" :face nerd-icons-purple)
        ("cl" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-lorange) ;; umm it has a lambda at least
        ("l" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-orange)
        ("lisp" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-orange)
        ("el" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-purple)
        ("clj" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-blue)
        ("cljc" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-blue)
        ("cljs" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-lyellow)
        ("coffee" nerd-icons-faicon "nf-fa-coffee" :face nerd-icons-maroon)
        ("iced" nerd-icons-faicon "nf-fa-coffee" :face nerd-icons-lmaroon)
        ("dart" nerd-icons-devicon "nf-dev-dart" :face nerd-icons-blue)
        ("rkt" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-red)
        ("scrbl" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-blue)
        ("css" nerd-icons-devicon "nf-dev-css3" :face nerd-icons-yellow)
        ("scss" nerd-icons-devicon "nf-dev-css3" :face nerd-icons-pink)
        ("sass" nerd-icons-devicon "nf-dev-css3" :face nerd-icons-dpink)
        ("less" nerd-icons-devicon "nf-dev-css3" :face nerd-icons-dyellow)
        ("styl" nerd-icons-devicon "nf-dev-css3" :face nerd-icons-lgreen)
        ("csv" nerd-icons-octicon "nf-oct-graph" :face nerd-icons-dblue)
        ("hs" nerd-icons-devicon "nf-dev-haskell" :face nerd-icons-red)
        ("chs" nerd-icons-devicon "nf-dev-haskell" :face nerd-icons-purple)
        ("lhs" nerd-icons-devicon "nf-dev-haskell" :face nerd-icons-purple)
        ("hsc" nerd-icons-devicon "nf-dev-haskell" :face nerd-icons-purple)
        ("tidal" nerd-icons-devicon "nf-dev-haskell" :face nerd-icons-purple)
        ("htm" nerd-icons-devicon "nf-dev-html5" :face nerd-icons-orange)
        ("html" nerd-icons-devicon "nf-dev-html5" :face nerd-icons-orange)
        ("inky-er" nerd-icons-devicon "nf-dev-html5" :face nerd-icons-lred)
        ("inky-erb" nerd-icons-devicon "nf-dev-html5" :face nerd-icons-lred)
        ("erb" nerd-icons-devicon "nf-dev-html5" :face nerd-icons-lred)
        ("inky-slim" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-yellow)
        ("slim" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-yellow)
        ("ml" nerd-icons-devicon "nf-dev-perl" :face nerd-icons-lpink)
        ("mli" nerd-icons-devicon "nf-dev-perl" :face nerd-icons-dpink)
        ("react" nerd-icons-devicon "nf-dev-react" :face nerd-icons-lblue)
        ("ts" nerd-icons-sucicon "nf-seti-typescript" :face nerd-icons-blue-alt)
        ("js" nerd-icons-devicon "nf-dev-javascript" :face nerd-icons-yellow)
        ("es" nerd-icons-devicon "nf-dev-javascript" :face nerd-icons-yellow)
        ("jsx" nerd-icons-devicon "nf-dev-javascript" :face nerd-icons-cyan-alt)
        ("tsx" nerd-icons-sucicon "nf-seti-typescript" :face nerd-icons-blue-alt)
        ("njs" nerd-icons-devicon "nf-dev-javascript" :face nerd-icons-lgreen)
        ("vue" nerd-icons-mdicon "nf-md-vuejs" :face nerd-icons-lgreen)
        ("scala" nerd-icons-devicon "nf-dev-scala" :face nerd-icons-red)
        ("scm" nerd-icons-devicon "nf-dev-clojure" :face nerd-icons-red)
        ("swift" nerd-icons-devicon "nf-dev-swift" :face nerd-icons-green)
        ("asm" nerd-icons-faicon "nf-fa-microchip" :face nerd-icons-blue)
        ("kt" nerd-icons-sucicon "nf-seti-kotlin" :face nerd-icons-orange)
        ("kts" nerd-icons-sucicon "nf-seti-kotlin" :face nerd-icons-orange)
        ("nim" nerd-icons-sucicon "nf-seti-nim" :face nerd-icons-yellow) ;; TODO
        ("nims" nerd-icons-sucicon "nf-seti-nim" :face nerd-icons-yellow) ;; TODO
        ("sql" nerd-icons-faicon "nf-fa-database" :face nerd-icons-silver)
        ("lua" nerd-icons-sucicon "nf-seti-lua" :face nerd-icons-dblue)
        ("j2" nerd-icons-faicon "nf-fa-code" :face nerd-icons-silver)
        ("jinja2" nerd-icons-faicon "nf-fa-code" :face nerd-icons-silver)
        ("dockerfile" nerd-icons-sucicon "nf-seti-docker" :face nerd-icons-cyan)
        ("glsl" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-blue)
        ("vert" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-blue)
        ("tesc" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-purple)
        ("tese" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-dpurple)
        ("geom" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-green)
        ("frag" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-red)
        ("comp" nerd-icons-faicon "nf-fa-dashboard" :face nerd-icons-dblue)
        ("cu" nerd-icons-sucicon "nf-custom-c" :face nerd-icons-green)
        ("cs" nerd-icons-mdicon "nf-md-language_csharp" :face nerd-icons-dblue)
        ("csx" nerd-icons-mdicon "nf-md-language_csharp" :face nerd-icons-dblue)
        ("fs" nerd-icons-devicon "nf-dev-fsharp" :face nerd-icons-blue-alt)
        ("fsi" nerd-icons-devicon "nf-dev-fsharp" :face nerd-icons-blue-alt)
        ("fsx" nerd-icons-devicon "nf-dev-fsharp" :face nerd-icons-blue-alt)
        ("fsscript" nerd-icons-devicon "nf-dev-fsharp" :face nerd-icons-blue-alt)
        ("gd" nerd-icons-faicon "nf-fa-cog" :face nerd-icons-blue)
        ("zig" nerd-icons-sucicon "nf-seti-zig" :face nerd-icons-orange)
        ("ico" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-blue)
        ("png" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-orange)
        ("gif" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-green)
        ("jpeg" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-dblue)
        ("jpg" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-dblue)
        ("webp" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-dblue)
        ("xpm" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-dgreen)
        ("mp3" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("wav" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("m4a" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("ogg" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("flac" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("opus" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("au" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("aif" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("aifc" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("aiff" nerd-icons-faicon "nf-fa-music" :face nerd-icons-dred)
        ("svg" nerd-icons-octicon "nf-oct-file_media" :face nerd-icons-lgreen)
        ("mov" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("mp4" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("ogv" nerd-icons-faicon "nf-fa-film" :face nerd-icons-dblue)
        ("mpg" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("mpeg" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("flv" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("ogv" nerd-icons-faicon "nf-fa-film" :face nerd-icons-dblue)
        ("mkv" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("webm" nerd-icons-faicon "nf-fa-film" :face nerd-icons-blue)
        ("ttf" nerd-icons-faicon "nf-fa-font" :face nerd-icons-dcyan)
        ("woff" nerd-icons-faicon "nf-fa-font" :face nerd-icons-cyan)
        ("woff2" nerd-icons-faicon "nf-fa-font" :face nerd-icons-cyan)
        ("iso" nerd-icons-faicon "nf-fae-disco" :face nerd-icons-orange)
        ("tar" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-orange)
        ("rar" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-orange)
        ("tgz" nerd-icons-octicon "nf-oct-file_zip" :face nerd-icons-orange)
        ("jar" nerd-icons-devicon "nf-dev-java" :face nerd-icons-dpurple)
        ("pdf" nerd-icons-faicon "nf-fa-file_pdf" :face nerd-icons-dred)
        ("text" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-cyan)
        ("txt" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-cyan)
        ("doc" nerd-icons-faicon "nf-fa-file_word" :face nerd-icons-blue)
        ("docx" nerd-icons-faicon "nf-fa-file_word" :face nerd-icons-blue)
        ("docm" nerd-icons-faicon "nf-fa-file_word" :face nerd-icons-blue)
        ("texi" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-lred)
        ("tex" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-lred)
        ("ltx" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-lred)
        ("dtx" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-lred)
        ("sty" nerd-icons-faicon "nf-fa-file_text" :face nerd-icons-lred)
        ("md" nerd-icons-octicon "nf-oct-markdown" :face nerd-icons-lblue)
        ("bib" nerd-icons-faicon "nf-fa-book" :face nerd-icons-lblue)
        ("org" nerd-icons-sucicon "nf-seti-rails" :face nerd-icons-lgreen) ;; TRUST ME BRO
        ("org_archive" nerd-icons-sucicon "nf-seti-rails" :face nerd-icons-lgreen)
        ("pps" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-orange)
        ("ppt" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-orange)
        ("pptx" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-orange)
        ("pptsx" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-orange)
        ("ppttx" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-orange)
        ("knt" nerd-icons-faicon "nf-fa-file_powerpoint" :face nerd-icons-cyan)
        ("xlsx" nerd-icons-faicon "nf-fa-file_excel" :face nerd-icons-dgreen)
        ("xlsm" nerd-icons-faicon "nf-fa-file_excel" :face nerd-icons-dgreen)
        ("xlsb" nerd-icons-faicon "nf-fa-file_excel" :face nerd-icons-dgreen)
        ("xltx" nerd-icons-faicon "nf-fa-file_excel" :face nerd-icons-dgreen)
        ("xltm" nerd-icons-faicon "nf-fa-file_excel" :face nerd-icons-dgreen)
        ("epub" nerd-icons-faicon "nf-fa-book" :face nerd-icons-green)
        ("ly" nerd-icons-faicon "nf-fa-music" :face nerd-icons-green)
        ("key" nerd-icons-faicon "nf-fa-key" :face nerd-icons-lblue)
        ("pem" nerd-icons-faicon "nf-fa-key" :face nerd-icons-orange)
        ("p12" nerd-icons-faicon "nf-fa-key" :face nerd-icons-dorange)
        ("crt" nerd-icons-faicon "nf-fa-key" :face nerd-icons-lblue)
        ("pub" nerd-icons-faicon "nf-fa-key" :face nerd-icons-blue)
        ("gpg" nerd-icons-faicon "nf-fa-key" :face nerd-icons-lblue)
        ("kdbx" nerd-icons-faicon "nf-fa-key" :face nerd-icons-green)
        ("cache" nerd-icons-faicon "nf-fa-database" :face nerd-icons-green)
        ("backup" nerd-icons-mdicon "nf-md-backup_restore" :face nerd-icons-lblue)
        ("old" nerd-icons-mdicon "nf-md-backup_restore" :face nerd-icons-lblue)
        ("bak" nerd-icons-mdicon "nf-md-backup_restore" :face nerd-icons-lblue)
        ("lock" nerd-icons-faicon "nf-fa-lock" :face nerd-icons-dsilver)))
